{"version":3,"file":"static/js/488.e0aa60b4.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","../node_modules/@chakra-ui/icons/src/Email.tsx","../node_modules/@chakra-ui/icons/src/Lock.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"formControl\":\"RegisterForm_formControl__3oogs\",\"icon\":\"RegisterForm_icon__Xn6st\",\"registerBtn\":\"RegisterForm_registerBtn__p-FTZ\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/authOperation';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n  Heading,\n  IconButton,\n  useToast,\n} from '@chakra-ui/react';\nimport { EmailIcon, LockIcon } from '@chakra-ui/icons';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const toast = useToast();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const result = await dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n\n    if (result.meta.requestStatus === 'fulfilled') {\n      toast({\n        title: 'Registration successful.',\n        description: \"You've successfully registered.\",\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: 'top-right',\n      });\n      form.reset();\n    } else {\n      toast({\n        title: 'Registration failed.',\n        description: 'Please try again.',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top-right',\n      });\n    }\n  };\n\n  const handlePasswordVisibility = () => setShowPassword(!showPassword);\n\n  return (\n    <Box\n      className={css.form}\n      as=\"form\"\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n      p={4}\n      boxShadow=\"md\"\n      borderRadius=\"md\"\n    >\n      <Heading as=\"h3\" size=\"lg\" mb={4} textAlign=\"center\">\n        Sign-up Account\n      </Heading>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Name</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<FaUserAlt className={css.icon} />}\n          />\n          <Input type=\"text\" name=\"name\" focusBorderColor=\"#5046e5\" required />\n        </InputGroup>\n      </FormControl>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Email</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<EmailIcon className={css.icon} />}\n          />\n          <Input\n            type=\"email\"\n            name=\"email\"\n            focusBorderColor=\"#5046e5\"\n            required\n          />\n        </InputGroup>\n      </FormControl>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Password</FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<LockIcon className={css.icon} />}\n          />\n          <Input\n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            focusBorderColor=\"#5046e5\"\n            required\n          />\n          <InputRightElement>\n            <IconButton\n              icon={showPassword ? <ViewOffIcon /> : <ViewIcon />}\n              onClick={handlePasswordVisibility}\n              variant=\"ghost\"\n              size=\"sm\"\n            />\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button type=\"submit\" mt={3} className={css.registerBtn} width=\"full\">\n        Register\n      </Button>\n    </Box>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </HelmetProvider>\n  );\n};\n\nexport default RegisterPage;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EmailIcon = createIcon({\n  displayName: \"EmailIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M11.114,14.556a1.252,1.252,0,0,0,1.768,0L22.568,4.87a.5.5,0,0,0-.281-.849A1.966,1.966,0,0,0,22,4H2a1.966,1.966,0,0,0-.289.021.5.5,0,0,0-.281.849Z\" />\n      <path d=\"M23.888,5.832a.182.182,0,0,0-.2.039l-6.2,6.2a.251.251,0,0,0,0,.354l5.043,5.043a.75.75,0,1,1-1.06,1.061l-5.043-5.043a.25.25,0,0,0-.354,0l-2.129,2.129a2.75,2.75,0,0,1-3.888,0L7.926,13.488a.251.251,0,0,0-.354,0L2.529,18.531a.75.75,0,0,1-1.06-1.061l5.043-5.043a.251.251,0,0,0,0-.354l-6.2-6.2a.18.18,0,0,0-.2-.039A.182.182,0,0,0,0,6V18a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V6A.181.181,0,0,0,23.888,5.832Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const LockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75a6.75,6.75,0,0,0-13.5,0V9.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5ZM7.75,6.75a4.25,4.25,0,0,1,8.5,0V9a.5.5,0,0,1-.5.5H8.25a.5.5,0,0,1-.5-.5Z\",\n  displayName: \"LockIcon\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","toast","useToast","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","form","_context","prev","next","preventDefault","currentTarget","register","name","elements","value","email","password","sent","meta","requestStatus","title","description","status","duration","isClosable","position","reset","stop","_x","apply","arguments","_jsxs","Box","className","css","as","onSubmit","autoComplete","p","boxShadow","borderRadius","children","_jsx","Heading","size","mb","textAlign","FormControl","FormLabel","InputGroup","InputLeftElement","pointerEvents","FaUserAlt","Input","type","focusBorderColor","required","EmailIcon","LockIcon","InputRightElement","IconButton","icon","ViewOffIcon","ViewIcon","onClick","variant","Button","mt","width","HelmetProvider","Helmet","forwardRef","passedProps","ref","styles","useStyleConfig","props","omitThemingProps","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","chakra","label","cx","__css","display","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","createIcon","options","viewBox","pathDefinition","d","_options$defaultProps","defaultProps","path","Children","Comp","Icon","length","fill","cy","r","h2","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}