{"version":3,"file":"static/js/753.457d75a4.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"formControl\":\"RegisterForm_formControl__3oogs\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/authOperation';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Heading,\n} from '@chakra-ui/react';\nimport css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Box\n      className={css.form}\n      as=\"form\"\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n      p={4}\n      boxShadow=\"md\"\n      borderRadius=\"md\"\n    >\n      <Heading as=\"h2\" size=\"lg\" mb={4} textAlign=\"center\">\n        Register\n      </Heading>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Username</FormLabel>\n        <Input type=\"text\" name=\"name\" />\n      </FormControl>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Email</FormLabel>\n        <Input type=\"email\" name=\"email\" />\n      </FormControl>\n      <FormControl className={css.formControl} mb={3}>\n        <FormLabel>Password</FormLabel>\n        <Input type=\"password\" name=\"password\" />\n      </FormControl>\n      <Button type=\"submit\" colorScheme=\"teal\" width=\"full\">\n        Register\n      </Button>\n    </Box>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </HelmetProvider>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["Heading","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","chakra","h2","cx","__css","displayName","FormLabel","passedProps","children","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","field","useFormControlContext","ownProps","_a","getLabelProps","label","display","textAlign","isRequired","useFormControlStyles","span","getRequiredIndicatorProps","RegisterForm","dispatch","useDispatch","_jsxs","Box","css","as","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","autoComplete","p","boxShadow","borderRadius","_jsx","size","mb","FormControl","Input","type","Button","colorScheme","width","HelmetProvider","Helmet"],"sourceRoot":""}