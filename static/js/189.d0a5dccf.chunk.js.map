{"version":3,"file":"static/js/189.d0a5dccf.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactListItem/ContactListItem.module.css?fe27","components/ContactList/ContactListItem/ContactListItem.jsx","components/Loader/Loader.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactPage/ContactsPage.module.css?0ad8","pages/ContactPage/ContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"searchBox\":\"Filter_searchBox__-wsOO\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/selectors';\nimport { DebounceInput } from 'react-debounce-input';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value.trim()));\n  };\n\n  return (\n    <>\n      <DebounceInput\n        className={css.searchBox}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search by name\"\n        value={filter}\n        onChange={handleFilterChange}\n        debounceTimeout={500}\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"ContactForm_filter__2gQqh\",\"addContact\":\"ContactForm_addContact__Q30Jz\",\"saveButton\":\"ContactForm_saveButton__Ua4ZN\",\"icon\":\"ContactForm_icon__wGMYw\",\"inputGroup\":\"ContactForm_inputGroup__DXBcm\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsOperation';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectContacts } from '../../redux/selectors';\nimport { FaUser, FaPhone } from 'react-icons/fa';\n\n// Chakra UI\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // Chakra UI Modal\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // If name and number is empty it will not submit\n    if (name.trim() === '' || number.trim() === '') {\n      return;\n    }\n\n    // If existing contact exist it will not submit\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (existingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    // Reset form\n    setName('');\n    setNumber('');\n\n    // Close the modal after submission\n    onClose();\n  };\n\n  return (\n    <>\n      <div className={css.filter}>\n        <Filter />\n        <Button onClick={onOpen} colorScheme=\"white\" className={css.addContact}>\n          Add Contact\n        </Button>\n      </div>\n\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Add Contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form id=\"contact-form\" onSubmit={handleSubmit}>\n              <label>\n                <p>Name</p>\n                <InputGroup className={css.inputGroup}>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={<FaUser className={css.icon} />}\n                  />\n                  <Input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n                    required\n                    value={name}\n                    onChange={handleNameChange}\n                    // Chakra UI Attributes\n                    focusBorderColor=\"#5046e5\"\n                    placeholder=\"Enter contact name\"\n                  />\n                </InputGroup>\n              </label>\n\n              <label>\n                <p>Number</p>\n                <InputGroup className={css.inputGroup}>\n                  <InputLeftElement\n                    children={<FaPhone className={css.icon} />}\n                  />\n                  <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={number}\n                    onChange={handleNumberChange}\n                    // Chakra UI Attributes\n                    focusBorderColor=\"#5046e5\"\n                    placeholder=\"Enter contact number\"\n                  />\n                </InputGroup>\n              </label>\n            </form>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              colorScheme=\"white\"\n              mr={3}\n              type=\"submit\"\n              form=\"contact-form\"\n              className={css.saveButton}\n            >\n              Save\n            </Button>\n            <Button variant=\"ghost\" onClick={onClose}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"deleteBtn\":\"ContactListItem_deleteBtn__-+XMY\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContact,\n  editContact,\n} from '../../../redux/contacts/contactsOperation';\nimport { selectContacts } from '../../../redux/selectors';\n\n// Chakra UI\nimport {\n  Tr,\n  Td,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { FaUser, FaPhone } from 'react-icons/fa';\nimport css from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ filteredContact }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [name, setName] = useState(filteredContact.name);\n  const [number, setNumber] = useState(filteredContact.number);\n\n  // Handle Delete\n  const handleDelete = () => {\n    dispatch(deleteContact(filteredContact.id));\n  };\n\n  // Handle Edit Toggle\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n  };\n\n  // Handle Save\n  const handleSave = () => {\n    // Check if the edited contact name already exists\n    const existingContact = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() &&\n        contact.id !== filteredContact.id\n    );\n\n    if (existingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(\n      editContact({ contactId: filteredContact.id, contact: { name, number } })\n    );\n    setIsEditing(false);\n  };\n\n  return (\n    <Tr>\n      <Td>\n        {isEditing ? (\n          <InputGroup className={css.inputGroup}>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<FaUser className={css.icon} />}\n            />\n            <Input\n              htmlSize={15}\n              width=\"auto\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n              required\n              value={name}\n              onChange={e => setName(e.target.value)}\n              focusBorderColor=\"#5046e5\"\n              placeholder=\"Enter contact name\"\n            />\n          </InputGroup>\n        ) : (\n          filteredContact.name\n        )}\n      </Td>\n      <Td>\n        {isEditing ? (\n          <InputGroup className={css.inputGroup}>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<FaPhone className={css.icon} />}\n            />\n            <Input\n              htmlSize={15}\n              width=\"auto\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n              focusBorderColor=\"#5046e5\"\n              placeholder=\"Enter contact number\"\n            />\n          </InputGroup>\n        ) : (\n          filteredContact.number\n        )}\n      </Td>\n      <Td>\n        {isEditing ? (\n          <>\n            <Button\n              size=\"sm\"\n              colorScheme=\"blue\"\n              onClick={handleSave}\n              className={css.saveBtn}\n            >\n              Save\n            </Button>\n            <Button size=\"sm\" variant=\"ghost\" onClick={handleEditToggle}>\n              Cancel\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button\n              size=\"sm\"\n              colorScheme=\"red\"\n              onClick={handleDelete}\n              className={css.deleteBtn}\n            >\n              Delete\n            </Button>\n            <Button\n              size=\"sm\"\n              colorScheme=\"blue\"\n              onClick={handleEditToggle}\n              className={css.editBtn}\n            >\n              Edit\n            </Button>\n          </>\n        )}\n      </Td>\n    </Tr>\n  );\n};\n\nContactListItem.propTypes = {\n  filteredContact: PropTypes.object.isRequired,\n};\n","import { PulseLoader } from 'react-spinners';\n\nexport const Loader = () => {\n  return <PulseLoader color=\"#5046e5\" size={12} speedMultiplier={1} />;\n};\n","import { ContactListItem } from './ContactListItem/ContactListItem';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectFilteredContacts,\n  selectError,\n  selectIsLoading,\n} from '../../redux/selectors';\nimport { fetchContacts } from '../../redux/contacts/contactsOperation';\n\n// Chakra UI\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  TableContainer,\n  Box,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box className=\"css.status\">\n      {isLoading && !error && <Loader />}\n\n      {!isLoading && !error && filteredContacts.length === 0 && (\n        <p>No contacts found.</p>\n      )}\n\n      {!isLoading && !error && filteredContacts.length > 0 && (\n        <TableContainer>\n          <Table variant=\"striped\" size=\"md\">\n            <Thead>\n              <Tr>\n                <Th>Name</Th>\n                <Th>Number</Th>\n                <Th>Actions</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {filteredContacts.map(filteredContact => (\n                <ContactListItem\n                  key={filteredContact.id}\n                  filteredContact={filteredContact}\n                />\n              ))}\n            </Tbody>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__MolT3\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from '../../redux/contacts/contactsOperation';\nimport { selectIsLoading } from '../../redux/selectors';\nimport css from './ContactsPage.module.css';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <div className={css.container}>\n        <ContactForm />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <h2>Contacts</h2>\n        <ContactList />\n      </div>\n    </HelmetProvider>\n  );\n};\n\nexport default ContactPage;\n"],"names":["Filter","dispatch","useDispatch","filter","useSelector","selectFilter","_jsx","_Fragment","children","DebounceInput","className","css","type","name","placeholder","value","onChange","e","setFilter","target","trim","debounceTimeout","ContactForm","contacts","selectContacts","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_jsxs","Button","onClick","colorScheme","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","id","onSubmit","preventDefault","find","contact","toLowerCase","alert","concat","addContact","InputGroup","InputLeftElement","pointerEvents","FaUser","Input","pattern","title","required","focusBorderColor","FaPhone","ModalFooter","mr","form","variant","ContactListItem","_ref","filteredContact","isEditing","setIsEditing","_useState5","_useState6","handleEditToggle","Tr","Td","htmlSize","width","size","editContact","contactId","deleteContact","Loader","PulseLoader","color","speedMultiplier","ContactList","filteredContacts","selectFilteredContacts","error","selectError","isLoading","selectIsLoading","useEffect","fetchContacts","Box","length","TableContainer","Table","Thead","Th","Tbody","map","HelmetProvider","Helmet"],"sourceRoot":""}